<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on ericlearns</title>
    <link>http://ericlearns.com/tags/programming/index.xml</link>
    <description>Recent content in Programming on ericlearns</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="http://ericlearns.com/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Learning About the g&#43;&#43; Compiler</title>
      <link>http://ericlearns.com/post/learning-about-the-compilier/</link>
      <pubDate>Mon, 10 Apr 2017 20:32:38 -0400</pubDate>
      
      <guid>http://ericlearns.com/post/learning-about-the-compilier/</guid>
      <description>&lt;p&gt;Being that C++ is a &lt;em&gt;compiled&lt;/em&gt; language, we need a &lt;em&gt;compiler&lt;/em&gt; to &lt;em&gt;compile&lt;/em&gt; our code. Phew. For reasons that are not yet clear to me, my computers (Windows &amp;amp; Linux) have &lt;code&gt;g++&lt;/code&gt; already installed on them, so that&amp;rsquo;s what I&amp;rsquo;ve been using. &lt;code&gt;g++&lt;/code&gt; is used primarily via the command line, and takes a few arguments including file names and an output flag. Let&amp;rsquo;s write a simple C++ program and tinker with compiling it. I&amp;rsquo;ll go ahead and create a new file called &lt;code&gt;awesomeCalc.cpp&lt;/code&gt; and add the code below. The program just does a simple tax calculation and prints the results to the command line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;iostream&amp;gt;

int taxCalc(int price, float taxRate) {
    return price + (price * taxRate);
}

void printTotalPrice() {
    int totalPaid = taxCalc(100, .15);  // $100 at a 15% tax rate
    std::cout &amp;lt;&amp;lt; &amp;quot;Total price: &amp;quot; &amp;lt;&amp;lt; &amp;quot;$&amp;quot; &amp;lt;&amp;lt; totalPaid &amp;lt;&amp;lt; std::endl;
}

int main() {
    printTotalPrice();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, if I wanted to &lt;em&gt;compile&lt;/em&gt; this program I would move the location of the file using the command line and type the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;g++ awesomeCalc.app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far so good, but what just happened? The compiler went through the code, checked for errors, translated our C++ code to &lt;em&gt;machine code&lt;/em&gt;, and created an output file (usually) called &lt;code&gt;a.out&lt;/code&gt; or &lt;code&gt;a.exe&lt;/code&gt; depending on the operating system. You could run the executable from the command line at this point if you wanted:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which should output the following text in the command prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Total price: $115
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice. But I&amp;rsquo;d like to call the output file something other than &lt;code&gt;a.exe&lt;/code&gt;. How about &lt;code&gt;taxCalculator.exe&lt;/code&gt;? Back in the command prompt I need to &lt;em&gt;re-compile&lt;/em&gt; the code with the &lt;code&gt;g++&lt;/code&gt; optional flag &lt;code&gt;-o&lt;/code&gt; and the filename of my choice.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;g++ awesomeCalc.cpp -o taxCalculator.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now there is a new executable file with the much more &lt;em&gt;meaningful&lt;/em&gt; name &lt;code&gt;taxCaculator.exe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Things get a little more complicated when there are multiple files to compile. For example, a &lt;code&gt;header&lt;/code&gt; file, a &lt;code&gt;main&lt;/code&gt; file, and &lt;code&gt;logic&lt;/code&gt; file. I&amp;rsquo;ll probably look back at this scenario more in depth pretty soon, but I started writing my C++ programs in multiple files like this recently to keep everything organized (it also seems like best practice) and I really like it. At first I had a hard time figuring out how to get my code to compile though. My code fed into the &lt;code&gt;header&lt;/code&gt; and &lt;code&gt;main&lt;/code&gt; files, but when I ran&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;g++ main.cpp -o awesomeProgram.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I was greeted with a couple pages of error messages. It turns out that what I needed to do instead is compile &lt;code&gt;main.cpp&lt;/code&gt; with the logic file for my program &lt;code&gt;myAwesomeProgram.cpp&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;g++ main.cpp myAwesomeProgram.cpp -o awesomeProgram.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes! No pages of errors, and my executable is created. Does the order of the files matter when you compile? As far as I can tell it &lt;em&gt;usually&lt;/em&gt; does not, but this could be a nice surprise for me in the near future.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;g++ myAwesomeProgram.cpp main.cpp -o awesomeProgram.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It turns out that in C++ when you are &lt;code&gt;linking&lt;/code&gt; files using &lt;code&gt;g++&lt;/code&gt; (e.g. including &lt;code&gt;coolExistingFile.o&lt;/code&gt;), the order is very important because one of the &lt;code&gt;.cpp&lt;/code&gt; files could depend on what is in &lt;code&gt;coolExistingFile.o&lt;/code&gt; and needs to reference it first. I haven&amp;rsquo;t had a need to use &lt;code&gt;linking&lt;/code&gt; yet, so for now I am throwing my file names at &lt;code&gt;g++&lt;/code&gt; in whatever order I want.&lt;/p&gt;

&lt;p&gt;Up until I recently started learning C++ I have only worked with &lt;em&gt;interpreted&lt;/em&gt; langauges, so all of this is very new to me. Among other things in C++, I actually really like compiling and checking for errors. The error output in C++ is a huge change from what I&amp;rsquo;m used to seeing in Python but it is teaching me to read the tracebacks very carefully. It seems to be helping me be more careful when writing my code because I have this lingering fear of a 10 page error output from &lt;code&gt;g++&lt;/code&gt;. I tell myself:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Be diligent and check everything over in the code, or face the consequences of trying to understand an enourmous error output at compile time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Obviously, I could get pages of error messages no matter how thoroughly I check over my code before compiling, but I think it does helps my code quality and code writing efficiency a little bit. Sometimes fear is a good motivator I guess.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Closer Look At Namespaces</title>
      <link>http://ericlearns.com/post/closer-look-at-namespaces/</link>
      <pubDate>Sat, 08 Apr 2017 07:06:45 -0400</pubDate>
      
      <guid>http://ericlearns.com/post/closer-look-at-namespaces/</guid>
      <description>&lt;p&gt;According to &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/5cb46ksf.aspx&#34;&gt;Microsoft&amp;rsquo;s C++ Language Reference&lt;/a&gt;, C++ namespaces are (more or less):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A declarative region that provides a scope to types, functions, variables, etc inside it. Namespaces are used to organize code into logical groups and to prevent name collisions when working with a code base that includes multiple libraries.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, C++ namespaces are used to organize your code and prevent duplicate names (collisions). Got it.&lt;/p&gt;

&lt;p&gt;When I first started working in C++ I was writing &lt;code&gt;using namespace std;&lt;/code&gt; at the top of my files. It turns out that this can be a bad idea for more than a few reasons. The main reason being &lt;code&gt;name collisions&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;using namespace awesome1;
using namespace awesome2;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example above (modified from &lt;a href=&#34;http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice&#34;&gt;this SO post&lt;/a&gt;) if &lt;code&gt;namespace awesome2&lt;/code&gt; got an update that included a function named exactly the same as a function that exists in &lt;code&gt;namespace awesome1&lt;/code&gt; and you were using said function somewhere in your code, you now have a collision. I would expect to see a lengthy error output from the compiler telling me that there is a problem.&lt;/p&gt;

&lt;p&gt;The first C++ &lt;a href=&#34;http://www.greenteapress.com/thinkcpp/&#34;&gt;tutorial&lt;/a&gt; I worked through had me putting &lt;code&gt;using namespace std;&lt;/code&gt; at the top of my files, as I mentioned above. While this isn&amp;rsquo;t &lt;em&gt;terrible&lt;/em&gt; in practice, it&amp;rsquo;s also not ideal. To make declarations more clear, and to avoid potential name collisions, I switched over to prepending &lt;code&gt;std::&lt;/code&gt; to my declarations instead.&lt;/p&gt;

&lt;p&gt;Using the prepend (&lt;code&gt;std::cout&lt;/code&gt; for example) you&amp;rsquo;re basically saying:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hey, I&amp;rsquo;m using a reference to something that lives somewhere else! But, let me tell you exactly where it comes from. I&amp;rsquo;ll also do you the nice favor of not bringing in a bunch of other things that might not be needed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &amp;ldquo;not bringing in a bunch of other things&amp;rdquo; is an important point too. It&amp;rsquo;s better to bring in exactly what you need instead of cluttering up the namespace with &lt;em&gt;everything&lt;/em&gt; in the given library. This can get confusing pretty quickly. I&amp;rsquo;m picturing the equivalent in Python:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pymongo import *  # Now I have tons of things I don&#39;t need and don&#39;t know about. Dang.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vs&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pymongo import MongoClient  # I only need this thing right now and nothing else. Awesome!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In C++, this looks something like the example code below. Adding the prepend &lt;code&gt;std::&lt;/code&gt; (or others) is very tedious as I found out, but I think it does make the code more readable in the long run.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;iostream&amp;gt;

int main() {
    int awesomeIntVar = 100;
    std::cout &amp;lt;&amp;lt; &amp;quot;My awesome int variable: &amp;quot; &amp;lt;&amp;lt; awesomeIntVar &amp;lt;&amp;lt; std::endl;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another reasonable alternative is the &lt;code&gt;using&lt;/code&gt; directive:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using std::cout;
using std::endl;

int main() {
    int awesomeIntVar = 100;
    cout &amp;lt;&amp;lt; &amp;quot;My awesome int variable: &amp;quot; &amp;lt;&amp;lt; awesomeIntVar &amp;lt;&amp;lt; endl;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But how much is the &lt;code&gt;using&lt;/code&gt; directive pattern above really saving me? Am I giving up some &lt;em&gt;code readability&lt;/em&gt; in exchange for a slight convenience? I think I&amp;rsquo;ll stick with the &lt;em&gt;tedious&lt;/em&gt; explicit declaration for now.&lt;/p&gt;

&lt;p&gt;Apparently &lt;code&gt;using namespace ...&lt;/code&gt; or using &lt;code&gt;using std::cout&lt;/code&gt; (for example) is a big no-no in header files. Similar to the above scenarios, this can cause major name collisions. The &lt;a href=&#34;http://stackoverflow.com/questions/4872373/why-is-including-using-namespace-into-a-header-file-a-bad-idea-in-c&#34;&gt;example&lt;/a&gt; below shows what happened if I decided for some silly reason to create a &lt;code&gt;struct&lt;/code&gt; named &lt;code&gt;string&lt;/code&gt; with the &lt;code&gt;std&lt;/code&gt; namespace declared and &lt;code&gt;#include &amp;lt;string&amp;gt;&lt;/code&gt;. The compiler has no clue which &lt;code&gt;string&lt;/code&gt; to use, and you get an error.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;string&amp;gt;
using namespace std;

struct string {const char* p;};  // hmm, probably a bad name choice

int main() {
    // declare a string....but from where? Error.
    string x;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;But wait, there&amp;rsquo;s more!&lt;/em&gt; You can (and should) declare your own namespaces in C++!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;iostream&amp;gt;

namespace awesomeNamespace {
    // whatever variable you need!
    int height = 300;
}

namespace coolFunc {
    // functions too!
    void func() {
        std::cout &amp;lt;&amp;lt; &amp;quot;heck yeah&amp;quot; &amp;lt;&amp;lt; std:: endl;
    }
}

int main() {
    std::cout &amp;lt;&amp;lt; awesomeNamespace::height &amp;lt;&amp;lt; std::endl;
    coolFunc::func();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why would you want to declare your own namespace? Well, I think this would help differentiate functions with the same name in the same space. If you use the namespace prepend, you can let the compiler know exactly which function you are referring to. Brilliant.&lt;/p&gt;

&lt;p&gt;All this C++ namespace research got me wondering about namespaces in Python. Is there such a thing as a Python namespace? Well, yes but it works much differently than C++ namespaces. Python has &lt;code&gt;local&lt;/code&gt; and &lt;code&gt;global&lt;/code&gt; namespaces. A &lt;code&gt;local&lt;/code&gt; namespace exists in a package, module, class, or function. A &lt;code&gt;global&lt;/code&gt; namespace exists outside of the &lt;code&gt;local&lt;/code&gt; namespace when a name cannot be found in the &lt;code&gt;local&lt;/code&gt; namespace. This wonderful &lt;a href=&#34;http://stackoverflow.com/questions/3913217/what-are-python-namespaces-all-about?answertab=votes#tab-top&#34;&gt;SO answer&lt;/a&gt; sums it up nicely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Things I Know, Things I Don&#39;t Know, and Things I&#39;m Avoiding</title>
      <link>http://ericlearns.com/post/things-i-know-things-dont-know/</link>
      <pubDate>Thu, 06 Apr 2017 20:47:16 -0400</pubDate>
      
      <guid>http://ericlearns.com/post/things-i-know-things-dont-know/</guid>
      <description>&lt;p&gt;Let me get the thing I&amp;rsquo;m avoiding in C++ out of the way first: &lt;em&gt;Pointers&lt;/em&gt;. I recently read an article that boldy proclaimed&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;C++ pointers are easy and fun to learn!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hmm, this is a strange assertion and I&amp;rsquo;m not entirely convinced that the person who made this statement was entirely in their right mind. To me, pointers are very foreign concept. Even just googling &amp;ldquo;what is a pointer C++?&amp;rdquo; lead me to find many different definitions of &lt;em&gt;what&lt;/em&gt; a pointer actually is. Here is my best definition of a pointer for right now&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A variable that stores the (memory) address of another variable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That seems simple enough but I know that&amp;rsquo;s not all there is to it, so I am storing pointers under &amp;ldquo;Things I&amp;rsquo;m Avoiding&amp;rdquo; for now.&lt;/p&gt;

&lt;p&gt;How about some things I know? Well, I know that C++ is a &lt;em&gt;statically typed&lt;/em&gt; language, and all variable types must be defined as a result of this. Compared to Python and JavaScript (&lt;em&gt;dynamically typed&lt;/em&gt;) where basically anything goes, this is a bit of a change. But I will say that after writing some C++ for few days that having no option but to define the type is sort of refreshing. It&amp;rsquo;s nice to know exactly what is going in and what being returned.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int myInt, myOtherInt;
bool myBool;

int awesomeBool() {
    ...
    return 100;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another thing I know, but maybe don&amp;rsquo;t fully understand yet is the &lt;code&gt;main&lt;/code&gt; function. Another foreign concept to me, but it&amp;rsquo;s essentially the &lt;em&gt;entry point&lt;/em&gt; for the program. It must also &lt;em&gt;usually&lt;/em&gt; return an &lt;code&gt;int&lt;/code&gt; even if the &lt;code&gt;int&lt;/code&gt; is just a placeholder zero.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int main() {
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, &lt;code&gt;main&lt;/code&gt; also exists in Python but it&amp;rsquo;s not really as common and there is no entry point enforcement really. A more common idiom in Python is the &lt;code&gt;if __name__ == &#39;__main__:&lt;/code&gt;, which can take a function named &lt;code&gt;main&lt;/code&gt; or any object of your choice.&lt;/p&gt;

&lt;p&gt;Lastly, something I don&amp;rsquo;t fully understand yet are vectors. I know that vectors are a very important data structure in C++, but I can&amp;rsquo;t stop picturing them as Python dictionaries&amp;hellip;.or maybe a list? They are accessed in a similar fashion to a Python list, but they&amp;rsquo;re not exactly the same. You can iterate them, add (read &lt;code&gt;push_to&lt;/code&gt;) them, and even &lt;em&gt;nest&lt;/em&gt; them. They also need to be &lt;code&gt;#include&lt;/code&gt;&amp;rsquo;d when they&amp;rsquo;re used. Very handy, but I need to explore more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An Intro of Sorts</title>
      <link>http://ericlearns.com/post/an-intro-of-sorts/</link>
      <pubDate>Wed, 05 Apr 2017 20:57:36 -0400</pubDate>
      
      <guid>http://ericlearns.com/post/an-intro-of-sorts/</guid>
      <description>&lt;p&gt;So, I recently decided that I&amp;rsquo;d like to learn C++. Maybe not to become an expert C++ developer, which I assume takes many years, but to be comfortable enough
in the language to have it be useful. I think &amp;ldquo;proficient in C++&amp;rdquo; would be the right way to put it. The purpose of this blog will be for me to track my thoughts
and learning, and I also thought there might be someone else out there like me trying to learn who wants to follow along&amp;hellip;or sympathize with me.&lt;/p&gt;

&lt;p&gt;I should say up front that I am not learning C++ as a &lt;em&gt;new&lt;/em&gt; developer. I am (what I would consider) a relatively experienced Python and JavaScript (Node.js) developer.
In fact, I currently write code for a living. C++ always seemed like some monstrous beast of a language that was too difficult or not worth the tremendous effort to learn. I think I&amp;rsquo;ve
come to a point where learning C++ would help me improve as a developer, so why not give it a shot.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll probably see me make reference to idioms and patterns in python &lt;em&gt;a lot&lt;/em&gt;. Python is currently my favorite language, but it is obviously &lt;em&gt;very&lt;/em&gt; different than C++ in many ways. You will
probably also see me make egregious errors in C++, things that would make a seasoned C++ developer cry out in pain. I think this is part of the learning process, and it&amp;rsquo;s important to make mistakes while
learning new things, especially programming languages. With that being said, anything I write should NOT be used as a reference or tutorial of any sort. I mostly have no idea what I&amp;rsquo;m doing.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>